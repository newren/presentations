Next pieces
  * Results: comparison before and after
    Rename drivers->pilots
    Run: git rebase [-m] --onto HEAD $otherbranch

* Early explanations
  * (Work from years ago and Peff and I's standoff over who would rewrite?)
  * Original problem at Palantir that motivated my return

* Amusing
  * (Git Merge)^2
     v3:
       So yes, this means that today I'm talking at Git Merge (slight
       pause, next slide) about Git Merge, and in particular I'll be
       focusing on quadratic behavior found within it.

  * "It turns out that taking a slow piece of the code and replacing a
     slow algorithm with a faster one is not as effective an
     optimization as just not doing the work at all."

  * "Sadly, I need to apologize -- this is not one of those talks;
     instead I'll be using some different performance strategies"

  * "For those of you who think this is going to be a talk extolling the
     virtues of laziness, I have one more strategy up my sleeve.  (pause)
     Avoiding work is so nice that I want to find more ways to get away
     with it.  (pause)  Someone please make sure that my kids never see
     this talk."

  * The tree traversals in the last category are much cheaper since
    they only follow the path to one filename instead of walking all
    paths.  But what they fail to waste in each individual invocation,
    they make up for in quantity of invocations.

  * Someone had fun renaming files and putting their opinon into
    filenames.

  * Like a two year old running around the house with nothing but a
    diaper on who you've told to put their clothes back on, or a four
    year old who is told that they need to get a bath.  They just
    don't want to do it, and might take off running from you.  Maybe
    you usually have enough energy to chase them down, but there are
    some days when you may be tempted to ask, "How bad would it be if
    I just don't bother?"

  * "There's no way for us to know that the contents of these two
     files are similar enough to be used together in a content merge.
     (next slide) Just no way at all.  (pause) And if we have a long
     sequence of commits to cherry-pick or rebase, we'll need to
     re-detect all the upstream renames with every single commit."

One that I didn't manage to work in:

  * "This work represents my attempt to continue to not believe them."

Notes to self on certain slides:
  * [Beginning] "but the merge machinery isn't actually just about git-merge,
    it also affects several other commands in Git (show slide), including
    rebase and revert and several others, so it's an important building block
    to many parts of git."

  * [Three-way content merge] <DON'T FORGET about the two hashes matching
    sentence before providing transition words to the next slide!>

  * [Three-way Merging] "Can be though of as changes between A and E
    being applied to F, or as the changes between A and F being
    applied to E."

  * [Remembering previous work] <Early in slide mention that master has
    renamed a lot of files>
